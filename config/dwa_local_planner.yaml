
# ---------------------------
#     move base parameters
# ---------------------------

controller_frequency: 7.0
# (double, default: 20.0)
#  The rate in Hz at which to run the control loop and send velocity commands to the base. 

planner_patience: 5.0
# (double, default: 5.0)
# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed. 

recovery_behavior_enabled: false
#  (bool, default: true)
#  Whether or not to enable the move_base recovery behaviors to attempt to clear out space. 

controller_patience: 15.0
#  (double, default: 15.0)
#     How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed. 

conservative_reset_dist: 0.8
#  (double, default: 3.0)
#     The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base. 

clearing_rotation_allowed: false 
# (bool, default: true)
#     Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom. 

shutdown_costmaps: false
#  (bool, default: false)
#     Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state 

oscillation_timeout: 10.0
# (double, default: 0.0)
#     How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout. New in navigation 1.3.1 

oscillation_distance: 0.9
# (double, default: 0.5)
    # How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout New in navigation 1.3.1 

planner_frequency: 0.0
#  (double, default: 0.0)
#     The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked. New in navigation 1.6.0 

max_planning_retries: 3
#  (int32_t, default: -1)
#     How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries. 

NavfnROS:
  allow_unknown: true # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  default_tolerance: 0.2 # A tolerance on the goal point for the planner.

# 1. If using Trajectory Rollout
#TrajectoryPlannerROS:
#  max_vel_x: 0.45
#  min_vel_x: 0.1
#  max_vel_theta: 1.0
#  min_in_place_vel_theta: 0.4

#  acc_lim_theta: 3.2
#  acc_lim_x: 2.5
#  acc_lim_y: 2.5

#  holonomic_robot: false


# 2. If using Dynamic Window Approach
DWAPlannerROS:
  # Robot configuration parameters  
  acc_lim_x: 0.3
  acc_lim_y: 0.0
  acc_lim_th: 1.0

  max_vel_x: 0.8
  min_vel_x: -0.8
  max_vel_y: 0.8
  min_vel_y: -0.8

  max_vel_trans: 0.8
  min_vel_trans: 0.05
  max_vel_theta: 1.8
  min_vel_theta: 0.2

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.2
  xy_goal_tolerance: 0.1
  latch_xy_goal_tolerance: false

  # # Forward Simulation Parameters
  sim_time: 4.0
  # sim_granularity: 0.02
  # vx_samples: 6
  # vy_samples: 0
  # vtheta_samples: 20
  # penalize_negative_x: true

  prune_plane: true

  # # Trajectory scoring parameters
  path_distance_bias: 32.0 # The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 24.0 # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 0.01 # The weighting for how much the controller should attempt to avoid obstacles
  forward_point_distance: 0.8 # The distance from the center point of the robot to place an additional scoring point, in meters
  stop_time_buffer: 0.8  # The amount of time that the robot must stThe absolute value of the veolicty at which to start scaling the robot's footprint, in m/sop before a collision in order for a trajectory to be considered valid in seconds
  scaling_speed: 1.0 # The absolute value of the veolicty at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.8 # The maximum factor to scale the robot's footprint by
  publish_cost_grid: true
  # # # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.1 #How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)
