
# ---------------------------
#     move base parameters
# ---------------------------

controller_frequency: 7.0
# (double, default: 20.0)
#  The rate in Hz at which to run the control loop and send velocity commands to the base. 

planner_patience: 5.0
# (double, default: 5.0)
# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed. 

recovery_behavior_enabled: false
#  (bool, default: true)
#  Whether or not to enable the move_base recovery behaviors to attempt to clear out space. 

controller_patience: 15.0
#  (double, default: 15.0)
#     How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed. 

conservative_reset_dist: 0.2
#  (double, default: 3.0)
#     The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base. 

clearing_rotation_allowed: false 
# (bool, default: true)
#     Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom. 

shutdown_costmaps: false
#  (bool, default: false)
#     Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state 

oscillation_timeout: 1.0
# (double, default: 0.0)
#     How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout. New in navigation 1.3.1 

oscillation_distance: 0.5 
# (double, default: 0.5)
    # How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout New in navigation 1.3.1 

planner_frequency: 0.0
#  (double, default: 0.0)
#     The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked. New in navigation 1.6.0 

max_planning_retries: 3
#  (int32_t, default: -1)
#     How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries. 

NavfnROS:
  allow_unknown: true # Specifies whether or not to allow navfn to create plans that traverse unknown space.
  default_tolerance: 0.1 # A tolerance on the goal point for the planner.

TrajectoryPlannerROS:
  # Limits
  acc_lim_x: 1.0
  acc_lim_y: 0.0
  acc_lim_theta: 1.4

  max_vel_x: 0.8
  min_vel_x: -0.8

  max_vel_theta: 0.7
  min_vel_theta: -0.7

  min_in_place_vel_theta: 0.55

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.2
  xy_goal_tolerance: 0.2
  latch_xy_goal_tolerance: false

  # differential robot is non-holonomic
  holonomic_robot: false

  # Forward simulation
  sim_time: 2.8
  sim_granularity: 0.025
  angular_sim_granularity: 0.025
  vx_samples: 30
  vtheta_samples: 20
  controller_frequency: 20.0 

  #Trajectory scoring parameters
  meter_scoring: false #Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1 
  path_distance_bias: 3.0    #The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0 
  goal_distance_bias: 0.8    #The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0 
  occdist_scale: 3.0 #The weighting for how much the controller should attempt to avoid obstacles 
  heading_lookahead: 2.0 #How far to look ahead in meters when scoring different in-place-rotation trajectories 
  heading_scoring: false #Whether to score based on the robot's heading to the path or its distance from the path 
  heading_scoring_timestep: 0.8 #How far to look ahead in time in seconds along the simulated trajectory when using heading scoring 
  dwa: false #Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.) 
  publish_cost_grid_pc: true #Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0 
  global_frame_id: odom

# Oscillation parameters
  oscillation_reset_dist: 0.8

# Escape parameters
  escape_vel: -0.5
  escape_reset_dist: 0.3
  escape_reset_theta: 1.7

  simple_attractor: false

